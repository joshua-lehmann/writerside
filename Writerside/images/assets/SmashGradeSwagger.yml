openapi: 3.0.1
info:
  title: SmashGrade
  description: |-
  version: 1.0.0
tags:
  - name: studiengang
    description: Everything about your Pets
paths:
  /studiengaenge:
    get:
      tags:
        - studiengang
      operationId: getStudiengaenge
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Studiengang'
        '404':
          description: not found
  /studiengang:
    post:
      tags:
        - studiengang
      operationId: postStudiengang
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Studiengang'
      responses:
        '200':
          description: successful operation
  /studiengang/{id}:
    get:
      tags:
        - studiengang
      operationId: getStudiengang
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Studiengang'
        '404':
          description: not found
    put:
      tags:
        - studiengang
      operationId: putStudiengang
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Studiengang'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - studiengang
      operationId: deletePet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation
  /module:
    get:
      tags:
        - modul
      operationId: getModule
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Modul'
        '404':
          description: not found
  /modul:
    post:
      tags:
        - modul
      operationId: postmodul
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Modul'
      responses:
        '200':
          description: successful operation
  /modul/{id}:
    get:
      tags:
        - modul
      operationId: getModul
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Modul'
        '404':
          description: not found
    put:
      tags:
        - modul
      operationId: putModul
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Modul'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - modul
      operationId: deleteModul
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation





  /kurse:
    get:
      tags:
        - kurs
      operationId: getkurse
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kurs'
        '404':
          description: not found
  /kurs:
    post:
      tags:
        - kurs
      operationId: postkurs
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kurs'
      responses:
        '200':
          description: successful operation
  /kurs/{id}:
    get:
      tags:
        - kurs
      operationId: getkurs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kurs'
        '404':
          description: not found
    put:
      tags:
        - kurs
      operationId: putkurs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kurs'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - kurs
      operationId: deletekurs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation
  /kurs/{id}/teilnehmer:
    get:
      tags:
        - kurs
      operationId: getkursteilnehmer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: not found


  /tests:
    get:
      tags:
        - test
      operationId: gettests
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Test'
        '404':
          description: not found
  /test:
    post:
      tags:
        - test
      operationId: posttest
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '200':
          description: successful operation
  /test/{id}:
    get:
      tags:
        - test
      operationId: gettest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        '404':
          description: not found
    put:
      tags:
        - test
      operationId: puttest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - test
      operationId: deletetest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation
  /users:
    get:
      tags:
        - user
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user:
    post:
      tags:
        - user
      operationId: postUser
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      operationId: getuser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      operationId: putuser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - user
      operationId: deleteuser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation
  /user/{userId}/kurse:
    get:
      tags:
        - user
      operationId: usergetkurse
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kurs'
        '404':
          description: not found
  /user/{userId}/tests:
    get:
      tags:
        - user
      operationId: usergettests
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Test'
        '404':
          description: not found
  /user/{userId}/test/{testId}:
    get:
      tags:
        - user
      operationId: usergettest
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: testId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        '404':
          description: not found




components:
  schemas:
    Studiengang:
      type: object
      properties:
        id:
          type: integer
          format: int64
        schwerpunkt:
          type: string
          example: Softwareentwicklung
        fachrichtung:
          type: string
          example: Informatik
        studiengang:
          type: string
          example: Berufsbegleitend
        status:
          type: string
          example: Aktiv
        module:
          type: array
          items:
            $ref: '#/components/schemas/Modul'
    Modul:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bezeichnung:
          type: string
          example: Schnittstellen-Technologien
        nummer:
          type: string
        status:
          type: string
          example: Aktiv
        bewertungstyp_beschreibung:
          type: string
          example: Wenn alle Kurse erfuellt sind
        bewertungstyp_bezeichnung:
          type: string
          example: E
        kurse:
          type: array
          items:
            $ref: '#/components/schemas/Kurs'
    Kurs:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bezeichnung:
          type: string
          example: Projektmanagement
        nummer:
          type: string
          example: 3.121
        dozent:
          type: array
          items:
            type: string
            example: 
              - Kurt Munter
              - Lancelot
        kursbewertungsart:
          type: string
          example: M


    Test:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bezeichnung:
          type: string
          example: Projektarbeit
        gewichtung:
          type: integer
          format: float
          example: 0.3
        typ:
          type: string
          example: Schritfliche Arbeit
        kurs:
          $ref: '#/components/schemas/Kurs'
    Testbewertung:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wert:
          type: integer
          format: float
          example: 4.8
        eintragsdatum:
          type: string
          format: date-time
        test:
          $ref: '#/components/schemas/Test'
        kurs:
          $ref: '#/components/schemas/Kurs'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        klassen_startjahr:
          type: integer
          format: int64
        name:
          type: string
          example: Max Muster
        email: 
          type: string
          example: Max.Muster@hftm.ch
        rolle:
          type: string
          example: Schueler
        

          
      